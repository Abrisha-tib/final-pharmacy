<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Carbon\Carbon;

/**
 * Alert Model
 * 
 * Comprehensive alert management system for pharmacy operations.
 * Handles inventory, expiry, system, sales, and customer alerts.
 * 
 * @author Analog Software Solutions
 * @version 1.0
 */
class Alert extends Model
{
    use HasFactory;

    protected $fillable = [
        'title',
        'message',
        'type',
        'category',
        'priority',
        'status',
        'metadata',
        'user_id',
        'acknowledged_by',
        'acknowledged_at',
        'resolved_at',
        'expires_at',
        'is_auto_generated',
        'source'
    ];

    protected $casts = [
        'metadata' => 'array',
        'acknowledged_at' => 'datetime',
        'resolved_at' => 'datetime',
        'expires_at' => 'datetime',
        'is_auto_generated' => 'boolean'
    ];

    /**
     * Get the user who created the alert
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * Get the user who acknowledged the alert
     */
    public function acknowledgedBy(): BelongsTo
    {
        return $this->belongsTo(User::class, 'acknowledged_by');
    }

    /**
     * Scope for active alerts
     */
    public function scopeActive($query)
    {
        return $query->where('status', 'active');
    }

    /**
     * Scope for acknowledged alerts
     */
    public function scopeAcknowledged($query)
    {
        return $query->where('status', 'acknowledged');
    }

    /**
     * Scope for resolved alerts
     */
    public function scopeResolved($query)
    {
        return $query->where('status', 'resolved');
    }

    /**
     * Scope for critical priority alerts
     */
    public function scopeCritical($query)
    {
        return $query->where('priority', 'critical');
    }

    /**
     * Scope for high priority alerts
     */
    public function scopeHigh($query)
    {
        return $query->where('priority', 'high');
    }

    /**
     * Scope for alerts by category
     */
    public function scopeByCategory($query, $category)
    {
        return $query->where('category', $category);
    }

    /**
     * Scope for alerts by type
     */
    public function scopeByType($query, $type)
    {
        return $query->where('type', $type);
    }

    /**
     * Scope for auto-generated alerts
     */
    public function scopeAutoGenerated($query)
    {
        return $query->where('is_auto_generated', true);
    }

    /**
     * Scope for manual alerts
     */
    public function scopeManual($query)
    {
        return $query->where('is_auto_generated', false);
    }

    /**
     * Scope for expired alerts
     */
    public function scopeExpired($query)
    {
        return $query->where('expires_at', '<', now());
    }

    /**
     * Scope for non-expired alerts
     */
    public function scopeNotExpired($query)
    {
        return $query->where(function($q) {
            $q->whereNull('expires_at')
              ->orWhere('expires_at', '>', now());
        });
    }

    /**
     * Get the alert's priority color
     */
    public function getPriorityColorAttribute()
    {
        return match($this->priority) {
            'low' => 'blue',
            'medium' => 'yellow',
            'high' => 'orange',
            'critical' => 'red',
            default => 'gray'
        };
    }

    /**
     * Get the alert's type color
     */
    public function getTypeColorAttribute()
    {
        return match($this->type) {
            'info' => 'blue',
            'warning' => 'yellow',
            'error' => 'red',
            'success' => 'green',
            'critical' => 'red',
            default => 'gray'
        };
    }

    /**
     * Get the alert's status color
     */
    public function getStatusColorAttribute()
    {
        return match($this->status) {
            'active' => 'red',
            'acknowledged' => 'yellow',
            'resolved' => 'green',
            'dismissed' => 'gray',
            default => 'gray'
        };
    }

    /**
     * Get the alert's icon based on category
     */
    public function getCategoryIconAttribute()
    {
        return match($this->category) {
            'inventory' => 'fas fa-boxes',
            'expiry' => 'fas fa-calendar-times',
            'system' => 'fas fa-cog',
            'sales' => 'fas fa-shopping-cart',
            'customer' => 'fas fa-users',
            'purchase' => 'fas fa-shopping-bag',
            'supplier' => 'fas fa-truck',
            default => 'fas fa-bell'
        };
    }

    /**
     * Check if alert is expired
     */
    public function getIsExpiredAttribute()
    {
        return $this->expires_at && $this->expires_at->isPast();
    }

    /**
     * Check if alert is urgent (critical priority and active)
     */
    public function getIsUrgentAttribute()
    {
        return $this->priority === 'critical' && $this->status === 'active';
    }

    /**
     * Get time since alert was created
     */
    public function getTimeAgoAttribute()
    {
        return $this->created_at->diffForHumans();
    }

    /**
     * Acknowledge the alert
     */
    public function acknowledge($userId = null)
    {
        $this->update([
            'status' => 'acknowledged',
            'acknowledged_by' => $userId ?? auth()->id(),
            'acknowledged_at' => now()
        ]);
    }

    /**
     * Resolve the alert
     */
    public function resolve()
    {
        $this->update([
            'status' => 'resolved',
            'resolved_at' => now()
        ]);
    }

    /**
     * Dismiss the alert
     */
    public function dismiss()
    {
        $this->update([
            'status' => 'dismissed'
        ]);
    }

    /**
     * Create a new alert
     */
    public static function createAlert($data)
    {
        return self::create(array_merge([
            'is_auto_generated' => true,
            'user_id' => auth()->id()
        ], $data));
    }

    /**
     * Get alert statistics
     */
    public static function getStatistics()
    {
        return [
            'total' => self::count(),
            'active' => self::active()->count(),
            'critical' => self::critical()->active()->count(),
            'acknowledged' => self::acknowledged()->count(),
            'resolved' => self::resolved()->count(),
            'by_category' => self::selectRaw('category, count(*) as count')
                ->groupBy('category')
                ->pluck('count', 'category'),
            'by_priority' => self::selectRaw('priority, count(*) as count')
                ->groupBy('priority')
                ->pluck('count', 'priority')
        ];
    }
}
